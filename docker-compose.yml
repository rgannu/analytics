version: "3.7"
services:
  rabbitmq:
    container_name: rabbitmq
    build:
      context: ./docker/rabbitmq
      dockerfile: Dockerfile
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - ./docker/rabbitmq/scripts:/opt/utopian/analytics/rabbitmq/scripts

  zookeeper:
    hostname: zookeeper
    image: debezium/zookeeper:${DEBEZIUM_ZK_VERSION}
    container_name: zookeeper
    volumes:
      - ./docker/zookeeper/data:/zookeeper/data
      - ./docker/zookeeper/txns:/zookeeper/txns
      - ./docker/zookeeper/logs:/zookeeper/logs
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888

  kafka:
    image: debezium/kafka:${DEBEZIUM_KAFKA_VERSION}
    container_name: kafka
    ports:
      - 9092:9092
    volumes:
      - ./docker/kafka/scripts:/kafka/scripts
      - ./docker/kafka/data:/kafka/data
    depends_on:
      - zookeeper
    env_file:
      - ./config/kafka.env

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - 19000:9000
    env_file:
      - ./config/kafdrop.env
    depends_on:
      - kafka

  db:
    container_name: db
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
      args:
        name: skybridge
    ports:
      - 5432:5432
    volumes:
      - ./docker/flyway/navcan-data:/flyway/sql/navcan-data
      - ./docker/postgres/flyway/sql/db/migration-navcan:/flyway/sql/migration-navcan
    env_file:
      - ./config/db.env

#  flyway:
#    container_name: flyway
#    depends_on:
#      - db
#    build:
#      context: ./docker/flyway
#      dockerfile: Dockerfile
#      args:
#        name: skybridge
#        artifactoryUser: ${ARTIFACTORY_USER}
#        artifactoryPassword: ${ARTIFACTORY_PASSWORD}
#    command: -url=jdbc:postgresql://db/skybridge repair migrate
#    volumes:
#      - ./docker/flyway/conf:/flyway/conf
#      - ./docker/flyway/migration:/flyway/sql/migration
#      - ./docker/flyway/migration-analytics:/flyway/sql/migration-analytics

  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_VERSION}
    container_name: schema-registry
    ports:
      - 18181:8181
      - 18081:8081
    env_file:
      - ./config/schema-registry.env
    depends_on:
      - zookeeper
      - kafka

  connect:
    container_name: connect
    build:
      context: ./docker/connect
      dockerfile: Dockerfile
    ports:
      - 18083:8083
    volumes:
      - ./docker/connect/bin:/connect-volume/bin
      - ./docker/connect/log4j.properties:/kafka/config/log4j.properties
    depends_on:
      - zookeeper
      - kafka
      - db
      - schema-registry
    env_file:
      - ./config/connect.env

  ksql-server:
    image: confluentinc/cp-ksql-server:5.4.3
    hostname: ksql-server
    container_name: ksql-server
    depends_on:
      - kafka
      - connect
    ports:
      - "18088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://connect:18083
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:18081

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.4.3
    container_name: ksql-cli
    hostname: ksql-cli
    depends_on:
      - ksql-server
    entrypoint: /bin/sh
    tty: true

networks:
  default:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/24
