import java.text.SimpleDateFormat

buildscript {
    apply from: "gradle/repositories.gradle"
}

plugins {
    id 'maven-publish'
    id "org.sonarqube" version "2.8" apply false
    id "com.github.davidmc24.gradle.plugin.avro" version "1.0.0" apply false
    id "com.github.johnrengelman.shadow" version "6.1.0" apply false
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'

ext {
    artifactoryURL = "https://artifactory.unifly.aero"
    buildVersionFileName = "version.properties"
    commitId = project.hasProperty('commitId') ? commitId : null
    rabbitMqAmqpClientVersion = "5.9.0"
    avroVersion = "1.9.2"
    avroJacksonVersion = "2.10.2"
    gsonVersion = "2.8.5"
    kafkaScalaVersion = "2.12"
    kafkaVersion = "2.6.0"
    confluentVersion = "5.5.1"
    guavaVersion = "28.1-jre"
    jsonSchemaVersion = "1.12.1"
    debeziumVersion = "1.4.0.Alpha2"
    camelVersion = "3.6.0"
    camelKafkaConnectorVersion = "0.6.0"
    jupiterVersion = "5.6.2"
    assertjVersion = "3.16.0"
    assertjJsonUnitVersion = "2.18.0"
    kafkaSchemaMetadataVersion = "1.0.0"
    slf4jVersion = '1.7.30'
    lombokVersion = '1.18.18'
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

logging.captureStandardOutput LogLevel.DEBUG

configurations {
    transformsLib
}

task uberZip(type: Zip) {
    from("./bin") {
        into "bin"
    }

    from("./docker/connect/bin") {
        into "connect/bin"
    }

    from("./docker/connect") {
        include "log4j.properties"
        into "connect/config"
    }

    from("./docker/kafka/scripts") {
        into "kafka/scripts"
    }

    from("./build/libs") {
        include "*.jar"
    }

    from("*/build/libs") {
        include "*.jar"
    }
}

artifacts {
    archives jar
    archives uberZip
}

configure(javaProjects()) {
    apply plugin: 'java'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.github.davidmc24.gradle.plugin.avro-base'
    apply plugin: 'maven-publish'

    group = 'com.utopian.analytics'
    version = '1.0'

    repositories {
        maven {
            url "${artifactoryURL}"
        }
        maven {
            // https://stackoverflow.com/questions/41691133/gradlegrettycould-not-find-jai-core-jar
            url "https://repo1.maven.org/maven2"
            artifactUrls "http://maven.geotoolkit.org"
        }
        maven { url "https://packages.confluent.io/maven/" }
        jcenter()
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    configurations.all {
        resolutionStrategy {
            preferProjectModules()
        }
    }

    tasks.withType(Test) {
        testLogging {
            outputs.upToDateWhen { false }
            events 'standard_out'
            exceptionFormat = "full"
        }
    }

    test {
        // Assign all Java system properties from the command line to the Test task.
        systemProperties System.properties
        systemProperties['user.dir'] = workingDir
        systemProperties.remove("java.endorsed.dirs")
        systemProperties.remove("java.ext.dirs")
        useJUnitPlatform()

        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        getExecutionData().setFrom(fileTree(project.buildDir).include("/jacoco/*.exec"))
        reports {
            xml.enabled true
        }
    }

    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.sourceEncoding", "UTF-8"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                suppressAllPomMetadataWarnings()
                artifact uberZip
            }
        }

        repositories {
            maven {
                name = 'unifly'
                def releasesRepoUrl = artifactoryURL + "/artifactory/libs-release-local"
                def snapshotsRepoUrl = artifactoryURL + "/artifactory/libs-snapshot-local"
                url = rootProject.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials(PasswordCredentials)
            }
        }
    }
}

dependencies {
    transformsLib group: 'com.utopian.analytics.transforms', name: 'kafka-schema-metadata-smt', version: "${kafkaSchemaMetadataVersion}", ext: 'jar'
}

task determineCommitId {
    def takeFromHash = 16
    if (commitId) {
        commitId = commitId.take(takeFromHash)
    } else if (file("$rootDir/.git/HEAD").exists()) {
        def headRef = file("$rootDir/.git/HEAD").text
        if (headRef.contains('ref: ')) {
            headRef = headRef.replaceAll('ref: ', '').trim()
            if (file("$rootDir/.git/$headRef").exists()) {
                commitId = file("$rootDir/.git/$headRef").text.trim().take(takeFromHash)
            }
        } else {
            commitId = headRef.trim().take(takeFromHash)
        }
    } else {
        commitId = "unknown"
    }
}

task createVersionFile(dependsOn: determineCommitId) {
    ext.receiptFile = file("$buildDir/$buildVersionFileName")
    outputs.file receiptFile
    outputs.upToDateWhen { false }
    doLast {
        def data = [
                commitId: commitId,
                version : version,
        ]

        receiptFile.parentFile.mkdirs()
        def content = data.entrySet().collect { "$it.key=$it.value" }.sort().join("\n")
        receiptFile.setText(content, "ISO-8859-1")
    }
}

jar {
    dependsOn createVersionFile
    from("$buildDir") {
        include "$buildVersionFileName"
    }
    dependsOn determineCommitId
    manifest {
        attributes("Implementation-Title": rootProject.name,
                "Implementation-Version": rootProject.version,
                "Implementation-Vendor": "Utopian",
                "Build-Date": new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
                "Build-Gradle": project.gradle.gradleVersion,
                "Commit-Id": commitId
        )
    }
}

task copySchemaTransformsLibrary(type: Copy) {
    from configurations.transformsLib
    into "docker/connect"
}

task getVersion {
    doLast {
        println "Version: " + version
    }
}

task getGroup {
    doLast {
        println "Group: " + rootProject.group
    }
}

build.dependsOn copySchemaTransformsLibrary, uberZip

subprojects { subProject ->
    subProject.group = rootProject.group
    subProject.version = rootProject.version

    apply from: "../gradle/repositories.gradle"

    subProject.apply plugin: 'java'
    subProject.apply plugin: 'eclipse'
    subProject.apply plugin: 'idea'
    subProject.apply plugin: 'jacoco'
    subProject.apply plugin: 'maven-publish'

    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    subProject.tasks.withType(Test) {
        // Assign all Java system properties from the command line to the Test task.
        systemProperties System.properties
        //BRANCH_NAME is provided by Jenkins
        systemProperties['user.dir'] = workingDir
        systemProperties.remove("java.endorsed.dirs")
        systemProperties.remove("java.ext.dirs")
        useJUnitPlatform()

        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        getExecutionData().setFrom(fileTree(project.buildDir).include("/jacoco/*.exec"))
        reports {
            xml.enabled true
        }
    }

    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.sourceEncoding", "UTF-8"
        }
    }
}

